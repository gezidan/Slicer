
#
# Make sure this CMake has BundleUtilities.cmake:
#
if(NOT EXISTS "${CMAKE_ROOT}/Modules/BundleUtilities.cmake")
  message(FATAL_ERROR "error: BundleUtilities.cmake not found. Use CMake 2.8.3 or later.")
endif()
include(BundleUtilities)

#
# Avoid following symlinks encountered during FILE GLOB_RECURSE calls:
#
if(COMMAND CMAKE_POLICY)
  cmake_policy(SET CMP0009 NEW)
  if(POLICY CMP0011)
    cmake_policy(SET CMP0011 NEW)
  endif()
endif()


#-----------------------------------------------------------------------------
# gp_item_default_embedded_path_override item default_embedded_path_var
#-----------------------------------------------------------------------------
# Return the path that others should refer to the item by when the item
# is embedded inside a bundle.
#
# This is a project-specific override of BundleUtilities.cmake's
# gp_item_default_embedded_path
#
function(gp_item_default_embedded_path_override item default_embedded_path_var)

  # By default, embed items as set by gp_item_default_embedded_path:
  set(path "${${default_embedded_path_var}}")

  if(item MATCHES "\\.dylib$")
    set(path "@executable_path@/../@Slicer_LIB_DIR@")
  endif()

  if(item MATCHES "libpython.*\\.dylib$")
    set(path "@executable_path@/../lib/Python/lib")
  endif()

  if(item MATCHES "tcl-build/lib/lib.*\\.dylib$")
    set(path "@executable_path@/../lib/TclTk")
  endif()

  if(item MATCHES "@Slicer_ITKFACTORIES_DIR@/[^/]+Plugin\\.(so|dylib)$")
    set(path "@executable_path@/../@Slicer_ITKFACTORIES_DIR@")
  endif()

  if(item MATCHES "@Slicer_PLUGINS_LIB_DIR@/.*\\.dylib$")
    set(path "@executable_path@/../@Slicer_PLUGINS_LIB_DIR@")
  endif()

  if(item MATCHES "@Slicer_QTLOADABLEMODULES_LIB_DIR@/.*\\.dylib$")
    set(path "@executable_path@/../@Slicer_QTLOADABLEMODULES_LIB_DIR@")
  endif()

  if(item MATCHES "@Slicer_QTLOADABLEMODULES_LIB_DIR@/.*Python\\.so$")
    set(path "@executable_path@/../@Slicer_QTLOADABLEMODULES_LIB_DIR@")
  endif()

  if(item MATCHES "@Slicer_QtPlugins_DIR@/imageformats/[^/]+\\.dylib$")
    set(path "@executable_path@/../@Slicer_QtPlugins_DIR@/imageformats")
  endif()

  set(${default_embedded_path_var} "${path}" PARENT_SCOPE)
endfunction()

#-----------------------------------------------------------------------------
# Fixup the .app bundles in the install tree:
#-----------------------------------------------------------------------------
function(fixup_bundle_with_plugins location app)
  set(app_dir "$ENV{DESTDIR}${CMAKE_INSTALL_PREFIX}/${app}")
  set(suffix "@CMAKE_SHARED_LIBRARY_SUFFIX@")

  set(libs "")
  file(GLOB_RECURSE candidates
    "${app_dir}/Contents/@Slicer_QTLOADABLEMODULES_LIB_DIR@/*${suffix}"
    "${app_dir}/Contents/@Slicer_QTLOADABLEMODULES_LIB_DIR@/*Python.so"
    "${app_dir}/Contents/@Slicer_LIB_DIR@/designer/*${suffix}"
    "${app_dir}/Contents/@Slicer_LIB_DIR@/iconengines/*${suffix}"
    "${app_dir}/Contents/@Slicer_ITKFACTORIES_DIR@/*${suffix}"
    "${app_dir}/Contents/@Slicer_ITKFACTORIES_DIR@/*Plugin.so"
    "${app_dir}/Contents/@Slicer_PLUGINS_LIB_DIR@/*${suffix}"
    "${app_dir}/Contents/@Slicer_LIB_DIR@/*${suffix}"
    "${app_dir}/Contents/@Slicer_LIB_DIR@/*Python.so"
    "${app_dir}/Contents/lib/Python/lib/*${suffix}"
    "${app_dir}/Contents/lib/Python/lib/python2.6/lib-dynload/*.so"
    "${app_dir}/Contents/lib/Python/lib/python2.6/site-packages/*.so"
    "${app_dir}/Contents/lib/TclTk/lib/lib*${suffix}"
    "${app_dir}/Contents/@Slicer_QtPlugins_DIR@/imageformats/*${suffix}"
    )
  foreach(lib ${candidates})
    if(NOT lib MATCHES "(_debug|d[0-9])${suffix}$")
      set(libs ${libs} "${lib}")
    endif()
  endforeach()

  list(REMOVE_DUPLICATES libs)

  # Additional libs may be found in:
  set(libs_path "@CMAKE_RUNTIME_OUTPUT_DIRECTORY@")
  list(APPEND libs_path "@VTK_DIR@/bin")
  list(APPEND libs_path "@ITK_DIR@/bin")
  list(APPEND libs_path "@Teem_DIR@/bin")
  list(APPEND libs_path "@CTK_DIR@/bin")
  list(APPEND libs_path "@SlicerExecutionModel_DIR@/ModuleDescriptionParser/bin")
  list(APPEND libs_path "@LibArchive_DIR@/lib")
  set(Slicer_USE_BatchMake "@Slicer_USE_BatchMake@")
  if(Slicer_USE_BatchMake)
    list(APPEND libs_path "@BatchMake_DIR@/bin")
  endif()
  set(Slicer_USE_OpenIGTLink "@Slicer_USE_OpenIGTLink@")
  if(Slicer_USE_OpenIGTLink)
    list(APPEND libs_path "@OpenIGTLink_DIR@/bin")
  endif()

  list(APPEND libs_path "@Slicer_BINARY_DIR@/lib/Slicer3")
  list(APPEND libs_path "@Slicer_BINARY_DIR@/@Slicer_QTLOADABLEMODULES_LIB_DIR@")
  list(APPEND libs_path "@Slicer_BINARY_DIR@/@Slicer_PLUGINS_LIB_DIR@")
  list(APPEND libs_path "@Slicer_BINARY_DIR@/lib/Slicer3/iconengines")

  list(REMOVE_DUPLICATES libs_path)

  message("Calling fixup_bundle with")
  message("app=${app_dir}")
  message("libs=${libs}")
  message("libs_path=${libs_path}")

  fixup_bundle(
    "${app_dir}"
    "${libs}"
    "${libs_path}"
    )
endfunction()

fixup_bundle_with_plugins("" "Slicer.app")
#verify_app("/Users/partyd/Kitware/Slicer4-trunk/build/Slicer-build/_CPack_Packages/Darwin/DragNDrop/Slicer-4.0.gamma-2011-05-10-Darwin/Slicer.app")
